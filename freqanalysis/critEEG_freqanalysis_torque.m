function critEEG_freqanalysis_torque(SUBJ, trigger, freqtype, freqband)% set up freq_analysis.m for all subjects% parallel or notif ismac%     parallel = 'parfor';    parallel = 'local';else    parallel = 'torque';%     parallel = 'local';endcompile = 'no';if strcmp(freqband, 'full')    timreq = 40; %in minutes per runelseif strcmp(freqband, 'high')    timreq = 140; %in minutes per runelse    timreq = 140; %in minutes per run%     timreq = 2; %in minutes per runendmemreq = 4000; % in MBif ismac    basepath = '/Users/kloosterman/gridmaster2012/kloosterman/projectdata/critEEG';else    basepath = '/home/mpib/kloosterman/projectdata/critEEG';endcfg = {};ctr=0;for isub = 1:length(SUBJ)    for ises= 1:3                PREIN = fullfile(basepath, 'preproc', SUBJ{isub}, sprintf('ses%d', ises));        if ~exist(PREIN, 'dir')            fprintf('%s not found\n', PREIN)            continue        end                ctr = ctr + 1;        cfg{ctr} = [];        cfg{ctr}.PREIN = PREIN;        cfg{ctr}.PREOUT = fullfile(basepath, 'freq_costrap_robdetr', trigger, SUBJ{isub}, sprintf('ses%d', ises));        cfg{ctr}.trigger = trigger;        cfg{ctr}.freqtype = freqtype;        cfg{ctr}.freqband = freqband;            endendfprintf('Running freqanalysis for %d cfgs\n', length(cfg))switch parallel    case 'local'        cellfun(@freq_analysis, cfg(:));    case 'peer'        peercellfun(@freq_analysis, cfg(:));    case {'torque' 'qsublocal'}        setenv('TORQUEHOME', 'yes')        mkdir('~/qsub'); cd('~/qsub');        switch compile            case 'no'                nnodes = 60; % how many licenses available?                stack = round(length(cfg(:))/nnodes); % only used when not compiling                 qsubcellfun(@freq_analysis, cfg(:), 'memreq', memreq, 'timreq', timreq*60, ...                    'stack', stack, 'StopOnError', true, 'backend', parallel, 'options', '-l nodes=1:ppn=1'); %-q gpu                            case 'yes'%                 compiledfun = qsubcompile(@freq_analysis, 'toolbox', {'signal', 'stats'});                compiledfun = qsubcompile(@freq_analysis, 'toolbox', {'signal', 'stats'}, 'executable', ['run_' 'kloosterman_master_p27488_b1' '.sh']);                                qsubcellfun(compiledfun, cfg(:), 'memreq', memreq, 'timreq', timreq*60, ...                    'stack', 1, 'StopOnError', false, 'backend', parallel, 'options', '-l nodes=1:ppn=1', ...                    'UniformOutput', false );        end            case 'parfor'        parfor ibatch = 1:length(cfg(:))            freq_analysis(cfg{ibatch})        end    otherwise        error('Unknown backend, aborting . . .\n')end