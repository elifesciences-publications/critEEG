function critEEG_concat_runs(SUBJ, trigger, freqtype, freqband)% Make jobs for each subject to concatenate runs and collect sessions% parallel or notif ismac%     parallel = 'parfor';    parallel = 'local';else    parallel = 'torque';    %     parallel = 'local';    endcompile = 'no';timreq = 80; %in minutes per run% timreq = 4; %in minutes per run% memreq = 8000; % in MBmemreq = 16000; % in MB% bctype = 'across/across'; %use avg across all trials per sessions as baseline. TODO take avg lib and cons?bctype = 'within/across'; %use as baseline condition specific spectrum% bctype = 'within/within'; %use as baseline condition specific spectrum, divide also within to get psc wrt own baselinebasespecweighting = 'average'; % average (equal weight lib and cons) or collapse trials over condsif ismac    basepath = '/Users/kloosterman/gridmaster2012/kloosterman/projectdata/critEEG';else    basepath = '/home/mpib/kloosterman/projectdata/critEEG';endinputfolder = 'freq_costrap';% inputfolder = 'freq_costrap_robdetr';cfg = {};ctr=0;for isub = 1:length(SUBJ)        PREIN = fullfile(basepath, inputfolder, trigger, SUBJ{isub});    if ~exist(PREIN, 'dir')        fprintf('%s not found\n', PREIN)        continue    end        ctr = ctr + 1;    cfg{ctr} = [];        cfg{ctr}.trigger = trigger;    cfg{ctr}.freqtype = freqtype;    cfg{ctr}.freqband = freqband;    cfg{ctr}.bctype = bctype;    cfg{ctr}.basespecweighting = basespecweighting;    cfg{ctr}.PREIN = PREIN;    cfg{ctr}.PREOUT = fullfile(basepath, inputfolder, trigger, SUBJ{isub}); % put 1 level higherendfprintf('Running concat_runs for %d cfgs\n', length(cfg))switch parallel    case 'local'        cellfun(@concat_runs, cfg(:), 'UniformOutput', false );    case 'peer'        peercellfun(@concat_runs, cfg(:));    case {'torque' 'qsublocal'}        setenv('TORQUEHOME', 'yes')        mkdir('~/qsub'); cd('~/qsub');        switch compile            case 'no'                nnodes = 30; % how many licenses available?                stack = round(length(cfg(:))/nnodes); % only used when not compiling                 qsubcellfun(@concat_runs, cfg(:), 'memreq', memreq, 'timreq', timreq*60, ...                    'stack', stack, 'StopOnError', true, 'backend', parallel, 'options', '-l nodes=1:ppn=1'); % -q gpu                            case 'yes'                compiledfun = qsubcompile(@concat_runs, 'toolbox', {'signal', 'stats'});%                 compiledfun = qsubcompile(@concat_runs, 'toolbox', {'signal', 'stats'}, ...%                     'executable',  'run_kloosterman_master_p26980_b2.sh'); %                qsubcellfun(compiledfun, cfg(:), 'memreq', memreq, 'timreq', timreq*60, ...                    'stack', 1, 'StopOnError', false, 'backend', parallel, 'options', '-l nodes=1:ppn=1', ...                    'UniformOutput', false );        end            case 'parfor'        parfor ibatch = 1:length(cfg(:))            concat_runs(cfg{ibatch});        end    otherwise        error('Unknown backend, aborting . . .\n')end