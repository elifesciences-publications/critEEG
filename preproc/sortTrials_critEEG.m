function [trl, event] = sortTrials_critEEG(cfg)% columns trl matrix critEEG:% 1 trial start% 2 trial end% 3 trial offset% 4 condition: Nomiss of Nofa: 1 = conservative, 2 = liberal% 5 signal (fig or hom)% 6 resp (yes or no)% 7 RT% 8 trial index% 9 signal orientation% 10 ses nr% 11 run nr hdr    = cfg.headerfile;fsr    = cfg.fsample;         % in Hz% trg    = cfg.trialdef.trg;    % 'stim' or 'resp' or 'baseline'begtrl = cfg.trialdef.begtim; % in secondsendtrl = cfg.trialdef.endtim; % in seconds% find out run length - can padding be applied?header = ft_read_header(hdr);last_smp = header.nSamples;% cfg_2 = [];% cfg_2.datafile = cfg.datafile;% temp = ft_preprocessing(cfg_2);% last_smp = temp.sampleinfo(2);% clear tempswitch cfg.headerformat    case 'brainvision_vhdr'%         jjf_readEventCriterionEEG_NK(cfg.datafile)        event = cfg.event;    case 'biosemi_bdf'        % event already selected previously! EG see critEEG_analysebehavioral%         load('/Users/kloosterman/LOCALPROJECTS/critEEG/analysis/preprocessing/all_events_unbalanced.mat')%         load('/Users/kloosterman/Dropbox/PROJECTS/Johannes_EEG/CriterionEEG/all_events_unbalanced.mat')        % temp = event.Erik.Erik_NoFalseAlarms_010807_blok1;        % get event belonging to this subj and run%         [~, runname] = fileparts(cfg.dataset);%         event = event.(strtok(cfg.dataset, '_')).(runname);                % remove entries 1-3 (cm in range etc)        event = cfg.event(4:end);        end% remove [] entries in values and samplesfor i=1:length(event)    if isempty(event(i).value);        event(i).sample = [];   end    if isempty(event(i).sample);       event(i).value = [];    endend% JJ solution% [values{1:numel(temp)}] = deal(temp.value)% [samples{1:numel(temp)}] = deal(temp.sample)trgval = [event(find(strcmp('STATUS',{event.type}))).value];trgsmp = [event(find(strcmp('STATUS',{event.type}))).sample];% exp: trial duration 1 s: fig or hom presented after 160 ms. TRIGGER MOVED BACK 160 ms!!!% ITI: 300 - 2200 ms% Thus: minimum interval between Figs: 1000+300 = 1300 ms % names = { 'S1Fig' 'S2Fig' 'S1Hom' 'S2Hom' };% nameCodes = { 101 102 103 104 }; %% Correct!! 240 trials% nameCodes = { 101 102 202 204 }; %% WRONG!! ask JJ% button press = 1 trig_ind_stim = find(trgval == 101 | trgval == 102 | trgval == 103 | trgval == 104); % stim onset triggerstrig_ind_resp = find(trgval == 1); % resp triggerstrgsmp_resp = trgsmp(trig_ind_resp);% if strcmp(cfg.trialdeftype, 'mse') % cut out continuous ts, return%     trl = [trgsmp(trig_ind_stim(1)) trgsmp(trig_ind_stim(end)) 0];%     event = 1;%     return% endstim_trigger_shift = round(-0.16*fsr); % move trigger to start of stimulus train (4x40 ms = 160 ms = 0.16 s)trgsmp(trig_ind_stim) = trgsmp(trig_ind_stim) + stim_trigger_shift;trl = zeros(length(trig_ind_stim), 15);% trl(:,1) = round(trgsmp(trig_ind_stim)' + stim_trigger_shift + begtrl*fsr); % find stim onset samplestrl(:,1) = round(trgsmp(trig_ind_stim)' + begtrl*fsr); % find stim onset samplestrl(:,3) = round(begtrl*fsr);trl(:,8) = 1:size(trl,1); % trial index% add condition[~, remain] = strtok(cfg.dataset, '_');cond = strtok(remain, '_');if strcmp(cond, 'NoMiss') ||  strcmp(cond, 'NoMisses') %     trl(:,4) = 2;  % liberalelse    trl(:,4) = 1; % conservativeend    ctr=1;for istim = trig_ind_stim % each stim onset trigger    cur_stim_smp = trgsmp(istim);    cur_stim_val = trgval(istim);         if istim ~= trig_ind_stim(end)        next_stim_smp = trgsmp(trig_ind_stim(ctr+1)); % go to next  stim trigger    else % if the last stim, take last sample        next_stim_smp = last_smp;    end        if istim ~= trig_ind_stim(1)        prev_stim_smp = trgsmp(trig_ind_stim(ctr-1)); % go to next  stim trigger    else % if the first stim, put nan        prev_stim_smp = nan;    end        % add signal present (fig) or absent (hom)    if cur_stim_val == 101 || cur_stim_val == 102 % fig        trl(ctr,5) = 1;    elseif cur_stim_val == 103 || cur_stim_val == 104 % hom        trl(ctr,5) = 2;    end%     minRT = 0.2;    maxRT = 1;%     minRT = 0.36;    maxRT = 1.16; % Fig or hom only presented after 0.16 s%     minRT = 0.2;    maxRT = 1.41; % Fig or hom only presented after 0.16 s    minRT = 0.16;    maxRT = 1; % Fig or hom only presented after 0.16 s, tone after 1 s    trial_distance = 0; % 0: trials can go until onset of next stimulus    % find response that belongs to this trial    next_button_smp = trgsmp_resp(find(trgsmp_resp > cur_stim_smp, 1, 'first')); % find first resp after stim onset    if isempty(next_button_smp) || (next_button_smp - cur_stim_smp) > round(maxRT*fsr) || (next_button_smp - cur_stim_smp) < round(minRT*fsr)        trl(ctr,2) = cur_stim_smp + round(endtrl*fsr); % 1.2 sec now        trl(ctr,7) = -1;    else % we have a response        % kijk of we genoeg tijd na de resp hebben om endtrl eraan te plakken        desired_trialend_smp = next_button_smp + round(endtrl*fsr); % endtrl added, which is ample        if (next_stim_smp - desired_trialend_smp) > round(trial_distance*fsr) % houd trial_distance afstand tot volgende stim            trl(ctr,2) = desired_trialend_smp;        else            fprintf('Trial %d: Time until next stim only %d samples. Cropping . . .\n', ctr, next_stim_smp - next_button_smp)            trl(ctr,2) = next_stim_smp - round(trial_distance*fsr); % past niet, crop trial_distance s voor next stim        end                    trl(ctr,7) = next_button_smp - cur_stim_smp; % RT in col 7    end        % add signal 45 or 135 deg    if cur_stim_val == 101 || cur_stim_val == 103          trl(ctr,9) = 1; % 45 CHECK!    elseif cur_stim_val == 102 || cur_stim_val == 104        trl(ctr,9) = 2; % 135    end    % keep trial_distance_pre s between trial onset and last preceding response    % NOTE trials can lack the baseline period! Use nanmean for basespec calculation%     trial_distance_pre = 0.75; % Occ action lasts until 0.75 after button press%     trial_distance_pre = 1; % Occ action really lasts until 1 after button press TODO run with 1.5    trial_distance_pre = 1.5; % Run with 1.5 s    trial_distance_pre_smp = round( trial_distance_pre * fsr );     last_button_smp = trgsmp_resp(find(trgsmp_resp < trl(ctr,1), 1, 'last')); % find last resp before trial onset    if trl(ctr,1) - last_button_smp < trial_distance_pre_smp % we have a button press between -0.75 s and trial onset        fprintf('Trial %d: Response found %g samples before trial onset \n', ctr, trl(ctr,1) - last_button_smp )        trial_onset_old = trl(ctr,1); % remember this for the trigger location (offset)        trl(ctr,1) = last_button_smp + trial_distance_pre_smp; % new onset: take last response and add distance        trl(ctr,3) = trl(ctr,3) + trl(ctr,1) - trial_onset_old ; % old_offset + new - old    end        % remove trials that have a response in the baseline period or just after stim onset    response_free_period = [begtrl 0.2]; % could also do [-1.2 0.2]    resps_in_baseline = trgsmp_resp > cur_stim_smp + round(response_free_period(1)*fsr) ...        & trgsmp_resp < cur_stim_smp + round(response_free_period(2)*fsr);    if find(resps_in_baseline)        fprintf('Trial %d: Response found between %g-%g\n', ctr, response_free_period)        % zeroday found! 010717 length(cfg.channel) is always two%         if length(cfg.channel) > 6 % only zero for EEG, has 48+ channels, not behavioral analysis            % NOTE this might hamper time until next response single trial            % analysis            trl(ctr,:) = 0; % remove zeroed trials below%         end    end    % between -1.5 and -1 -> trial is started later, latest 0.5 s after train onset    % from -1: trial is discarded    % OR more strict: from -1.5 -> discard trial        % add time until next response (cf percept duration) 13    if isempty(next_button_smp) % we are already at the end of our responses        trl(ctr,13) = nan;    else        next_next_button_smp = trgsmp_resp(find(trgsmp_resp > next_button_smp, 1, 'first')); % find second resp after stim onset        if isempty(next_next_button_smp) % there is no second resp            trl(ctr,13) = nan;        else             trl(ctr,13) = next_next_button_smp - next_button_smp; % time until next response: commitment measure        end    end    % add time between current and next stimulus (to doublecheck ITI) 14    trl(ctr,14) = next_stim_smp - cur_stim_smp;        % add preceding ITI 15    trl(ctr,15) = cur_stim_smp - prev_stim_smp;        ctr = ctr+1;endtrl = trl( find(trl(:,1)),: ); % % remove zeroed trials trl(find(trl(:,7) > 0),6) = 1; %resp foundtrl(find(trl(:,7) == -1),6) = 2; %no resp foundpath=pwd;if ~isnan(str2double(path(end)))    trl(:,10) = str2double(path(end)); % add ses nr, depends on being in the sesX folder!else    trl(:,10) = cfg.runcfg.batch.sessionno; % depends on being run from preproc_peersetupendif isnan(str2double(cfg.datafile(end-5:end-4)))     trl(:,11) = str2double(cfg.datafile(end-4)); % one digit runnnrelse    trl(:,11) = str2double(cfg.datafile(end-5:end-4)); % 2 digit runnrendvalid_trials = find(trl(:,2) < last_smp & trl(:,1) > 0); % trials that fall within the recordingtrl = trl(valid_trials,:);valid_trials = find(diff(trl(:,1)) > 128); % exclude trials < 0.5 s apart (trigger bug?)trl = trl(valid_trials,:);trial_start_smp = trl(:,1) + (begtrl * fsr); % remove trials that are within padding distancevalid_trials = trial_start_smp > (cfg.padding * fsr);trl = trl(valid_trials,:);trl(:,12) = length(trig_ind_resp) - length(find(trl(:,6) == 1)); % allresps - resps in response window (after fig or hom), ie FA's not due to hom train