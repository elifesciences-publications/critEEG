function behav = critEEG_analysebehavioral(SUBJ)% Make jobs for each subject to concatenate runs and collect sessions% close allcfg=[]; behav=[];load('all_events_unbalanced.mat')cfg.eventall = event; % JJ's filebasepath = '/path/';PREIN = fullfile(basepath, 'data');behavout = fullfile(basepath, 'behavior');TYP = 'critEEG';RT_edges = 0.2:0.02:1; for isub = 1:length(SUBJ)    fprintf('Adding subject %s %s freq trials . . . \n',SUBJ{isub}, TYP)        get_behavior( fullfile(PREIN, SUBJ{isub}), cfg);endfunction get_behavior( subjdir, cfg )%Concatenate runs for each subject and save subjrespavg%   V2: have separate baselines for NoMiss and NoFAeventall = cfg.eventall;[~,SUBJ] = fileparts(subjdir);sesdirs = { 'ses1' 'ses2' 'ses3'};% behav_conds = {'NoMiss' 'NoFA'};basepath = '/path/';PREIN = fullfile(basepath);cd(subjdir); cd(sesdirs{2})behavout = fullfile(basepath, 'behavior');mkdir(behavout)seslist = dir(fullfile(subjdir, 'ses*'));trialinfo = []; % collect all trialinfos% trialinfo = cell(4,1);for ises = 1:length(seslist)    cd(fullfile(subjdir, sesdirs{ises}))    fprintf('\n\nSubject directory: %s  . . . \n', subjdir)    fprintf('Concatenating runs Subject %s Session %d: %s  . . .\n', SUBJ, ises, sesdirs{ises})        runlist = dir(fullfile(subjdir, sesdirs{ises}, sprintf('%s_*.bdf', SUBJ)));    if isempty(runlist);            runlist = dir(fullfile(subjdir, sesdirs{ises}, sprintf('%s_*.dat', SUBJ)));    end        powdat = [];    fprintf('Defining trials . . .\n')    for irun = 1:length(runlist)        cfg=[];        cfg.dataset = runlist(irun).name;%         cfg.trialfun = 'sortTrials_critEEG_behavior';        cfg.trialfun = 'sortTrials_critEEG';        cfg.trialdef.begtim = -0.45;  % before stim onset: t        cfg.trialdef.endtim = 1.25; % after report        cfg.fsample = 256;        cfg.channel = {    'EXG1',    'EXG2'    'EXG3'    'EXG4'     'EXG5'     'EXG6' }; % only EOG        cfg.reref = 'yes';        cfg.refchannel = { 'EXG5', 'EXG6' }; % earlobes        cfg.padding = 0;                % check if event is present in JJ's file        [~, runname] = fileparts(cfg.dataset);        try            cfg.event = eventall.(strtok(cfg.dataset, '_')).(runname);        catch            warning('Event field not found!!!')            continue        end        [cfg] = ft_definetrial(cfg);                data = ft_preprocessing(cfg);        % rereference EXG3 and 4 against each other (vert)        cfg = [];        cfg.channel    = {'EXG3', 'EXG4'};        cfg.reref      = 'yes';        cfg.refchannel = 'EXG4';        data_eogvert      = ft_preprocessing(cfg, data);        data_eogvert.label{1} = 'EOGV'; % rename        cfg = [];        cfg.channel = 'EOGV';        data_eogvert   = ft_preprocessing(cfg, data_eogvert); % nothing will be done, only the selection of the interesting channel        % rereference EXG1 and 2 against each other (hor)        cfg = [];        cfg.channel    = {'EXG1', 'EXG2'};        cfg.reref      = 'yes';        cfg.refchannel = 'EXG2';        data_eoghor      = ft_preprocessing(cfg, data);        data_eoghor.label{1} = 'EOGH'; % rename        cfg = [];        cfg.channel = 'EOGH';        data_eoghor   = ft_preprocessing(cfg, data_eoghor); % nothing will be done, only the selection of the interesting channel        trialinfotemp = data.trialinfo;        data = ft_appenddata([], data_eogvert, data_eoghor);        data.trialinfo = trialinfotemp;        % %         EOG artifact rejection        fprintf('\n\nLooking for EOG artifacts . . .\n')        cfg     = [];        cfg.padding = 0;        cfg.continuous = 'yes';        % cutoff and padding        % select a set of channels on which to run the artifact detection (e.g. can be 'MEG')        cfg.artfctdef.zvalue.channel = {'EOGV'};        cfg.artfctdef.zvalue.cutoff      = 4;        cfg.artfctdef.zvalue.trlpadding  = 0;        %     cfg.artfctdef.zvalue.artpadding  = 0.1;        %     cfg.artfctdef.zvalue.fltpadding  = 0.2;        cfg.artfctdef.zvalue.artpadding  = 0;        cfg.artfctdef.zvalue.fltpadding  = 0;        % algorithmic parameters        cfg.artfctdef.zvalue.bpfilter   = 'yes';        cfg.artfctdef.zvalue.bpfilttype = 'but';        cfg.artfctdef.zvalue.bpfreq     = [1 15];        cfg.artfctdef.zvalue.bpfiltord  = 4;        cfg.artfctdef.zvalue.hilbert    = 'yes';        % feedback        cfg.artfctdef.zvalue.interactive = 'no';                [cfgout, artfctdef.eog_ver.artifact] = ft_artifact_zvalue(cfg, data);        fprintf('%d vertical EOG artifacts found\n', length(artfctdef.eog_ver.artifact))                % horizontal movements (saccades)        %     cfg.artfctdef.zvalue.channel = {'EXG1', 'EXG2'};        cfg.artfctdef.zvalue.channel = {'EOGH'};        cfg.artfctdef.zvalue.cutoff      = 8;        [cfg, artfctdef.eog_hor.artifact] = ft_artifact_zvalue(cfg, data);        fprintf('%d horizontal EOG artifacts found\n', length(artfctdef.eog_hor.artifact))                cfg_rej.artfctdef.eog_ver.artifact = artfctdef.eog_ver.artifact;        cfg_rej.artfctdef.eog_hor.artifact = artfctdef.eog_hor.artifact;                % only reject if around (0.1 s) target onset,        cfg_rej.artfctdef.crittoilim = [zeros(size( data.trialinfo,1),1)-0.1  zeros(size( data.trialinfo,1),1)+0.1];                data  = ft_rejectartifact(cfg_rej,data); % throw out trials where subjects have eyes closed or look away         trialinfo = [trialinfo; data.trialinfo];    endendfilesave = fullfile(behavout, [SUBJ '_trialinfo.mat']);fprintf('Saving %s . . . \n', filesave)save(filesave, 'trialinfo')